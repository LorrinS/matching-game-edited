/**
 * Description 		   Edit of Matching Game
 * 
 * modified     	   20220408
 * date         	   20220408
 * @filename    	   MatchingGameEdited.java
 * @original author    Mr. Ho
 * @author/editor      Lorrin Shen
 * @version            1.0
 */

import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

//make sure done cards cannot be interacted with
public class MatchingGameEdited extends javax.swing.JFrame {

	ArrayList<String> cards = new ArrayList<String>();
	ArrayList<String> set = new ArrayList<String>();
	ImageIcon a = new ImageIcon("red.png");
	ImageIcon b = new ImageIcon("yellow.png");
	ImageIcon c = new ImageIcon("orange.png");
	ImageIcon d = new ImageIcon("purple.png");
	ImageIcon e = new ImageIcon("blue.png");
	ImageIcon f = new ImageIcon("green.png");
	ImageIcon back = new ImageIcon("x.png");
	ImageIcon done = new ImageIcon("checkmark.png");
	int count, c1, c2, card1, card2;
	int cardsLeft = 12;
	int[] change = new int[12];

	/**
	 * Creates new form MatchingGameEdited
	 */
	public MatchingGameEdited() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		mainTitle = new javax.swing.JLabel();
		Card1 = new javax.swing.JButton();
		Card2 = new javax.swing.JButton();
		Card3 = new javax.swing.JButton();
		Card4 = new javax.swing.JButton();
		Card5 = new javax.swing.JButton();
		Card6 = new javax.swing.JButton();
		Card7 = new javax.swing.JButton();
		Card8 = new javax.swing.JButton();
		Card9 = new javax.swing.JButton();
		Card10 = new javax.swing.JButton();
		Card11 = new javax.swing.JButton();
		Card12 = new javax.swing.JButton();
		btnPlay = new javax.swing.JButton();
		btuGuessAgain = new javax.swing.JButton();
		btnExit = new javax.swing.JButton();
		txtInstruction = new javax.swing.JTextField();
		txtInstruction.setEditable(false);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Matching Game");

		mainTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
		mainTitle.setForeground(new java.awt.Color(255, 0, 0));
		mainTitle.setText("Matching Game");



		btnPlay.setText("Play");
		btnPlay.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnPlayActionPerformed(evt);
			}
		});

		btuGuessAgain.setText("Guess Again");
		btuGuessAgain.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btuGuessAgainActionPerformed(evt);
			}
		});

		btnExit.setText("Exit");
		btnExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnExitActionPerformed(evt);
			}
		});

		txtInstruction.setText("Click the Play button to start.  Make sure click Guess Again after each guess.");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(layout.createSequentialGroup()
					.addGap(58)
					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup()
							.addComponent(mainTitle)
							.addGap(180))
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
								.addGroup(layout.createSequentialGroup()
									.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
										.addComponent(Card5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(Card1, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
									.addGap(18)
									.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
										.addComponent(Card2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(Card6, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE))
									.addGap(18)
									.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
										.addComponent(Card3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(Card7, GroupLayout.PREFERRED_SIZE, 123, GroupLayout.PREFERRED_SIZE)))
								.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
									.addGroup(layout.createSequentialGroup()
										.addComponent(btnPlay)
										.addGap(35)
										.addComponent(btuGuessAgain)
										.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(btnExit))
									.addGroup(layout.createSequentialGroup()
										.addComponent(Card9, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
										.addGap(18)
										.addComponent(Card10, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
										.addGap(18)
										.addComponent(Card11, GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))))
							.addGap(18)
							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
								.addComponent(Card12, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(Card8, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(Card4, GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
							.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
					.addGap(73))
				.addGroup(layout.createSequentialGroup()
					.addContainerGap(47, Short.MAX_VALUE)
					.addComponent(txtInstruction, GroupLayout.PREFERRED_SIZE, 616, GroupLayout.PREFERRED_SIZE)
					.addGap(54))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(mainTitle)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(Card4, GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
							.addComponent(Card2, GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
							.addComponent(Card1, GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
							.addComponent(Card3, GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)))
					.addGap(21)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(Card8, GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
							.addComponent(Card5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(Card6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(Card7, GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)))
					.addGap(18)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(Card12, GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
						.addComponent(Card11, GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
							.addComponent(Card9, GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
							.addComponent(Card10, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
					.addGap(159)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnPlay)
						.addComponent(btuGuessAgain)
						.addComponent(btnExit))
					.addGap(18)
					.addComponent(txtInstruction, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addGap(19))
		);
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
		// Exit the application.
		System.exit(0);
	}//GEN-LAST:event_btnExitActionPerformed

	private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
		//Buttons are disabled until the play button is clicked
		Card1.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card1ActionPerformed(evt);
			}
		});

		Card2.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card2ActionPerformed(evt);
			}
		});

		Card3.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card3ActionPerformed(evt);
			}
		});

		Card4.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card4ActionPerformed(evt);
			}
		});

		Card5.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card5.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card5ActionPerformed(evt);
			}
		});

		Card6.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card6.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card6ActionPerformed(evt);
			}
		});

		Card7.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card7.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card7ActionPerformed(evt);
			}
		});

		Card8.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card8.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card8ActionPerformed(evt);
			}
		});

		Card9.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card9.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card9ActionPerformed(evt);
			}
		});

		Card10.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card10.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card10ActionPerformed(evt);
			}
		});

		Card11.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card11.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card11ActionPerformed(evt);
			}
		});

		Card12.setIcon(new javax.swing.ImageIcon("C:\\Temporary Folders\\Testing\\New Matching Game\\MatchingGameEdited\\cardback.jpg")); // NOI18N
		Card12.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Card12ActionPerformed(evt);
			}
		});

		txtInstruction.setText("Click on a card to select. Click 2 cards before guessing. Make sure to click Guess Again after each guess.");

		/** Set change array */
		for (int z = 0; z <= 11; z++) {
			change[z] = 1;
		}

		/** Assign cards at random */
		String temp;
		for (int x = 0; x <= 5; x++) {
			for (int y = 1; y <= 2; y++) {
				temp = Integer.toString(x);
				set.add(temp);
			}
		}

		for (int x=0; x <= 11; x++) {
			double index = Math.floor(Math.random()*(12-x));
			int index1 = (int)index;
			cards.add(set.get(index1));
			set.remove(set.get(index1));
		}
	}//GEN-LAST:event_btnPlayActionPerformed

	private void Card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card1ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(0);
		if(count<2 && change[0]!=2) {

			if (temp.equals("0")) {
				Card1.setIcon(a);
			} else if (temp.equals("1")) {
				Card1.setIcon(b);
			} else if (temp.equals("2")) {
				Card1.setIcon(c);
			} else if (temp.equals("3")) {
				Card1.setIcon(d);
			} else if (temp.equals("4")) {
				Card1.setIcon(e);
			} else if (temp.equals("5")) {
				Card1.setIcon(f);
			}
		}
		count++;
		if (count == 1) {
			c1 = Integer.parseInt(temp);
			change[0] = 0;
		} else if (count == 2) {
			if(change[0]==0) { //check to make sure this card has not already been selected
				count--;
			}
			else {
				c2 = Integer.parseInt(temp);
				change[0] = 0;
			}
		}

	}//GEN-LAST:event_Card1ActionPerformed

	private void Card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card2ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(1);
		if(count<2 && change[1]!=2) {

			if (temp.equals("0")) {
				Card2.setIcon(a);
			} else if (temp.equals("1")) {
				Card2.setIcon(b);
			} else if (temp.equals("2")) {
				Card2.setIcon(c);
			} else if (temp.equals("3")) {
				Card2.setIcon(d);
			} else if (temp.equals("4")) {
				Card2.setIcon(e);
			} else if (temp.equals("5")) {
				Card2.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[1] = 0;
			} else if (count == 2) {
				if(change[1]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[1] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card2ActionPerformed

	private void Card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card3ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(2);
		if(count<2 && change[2]!=2) {

			if (temp.equals("0")) {
				Card3.setIcon(a);
			} else if (temp.equals("1")) {
				Card3.setIcon(b);
			} else if (temp.equals("2")) {
				Card3.setIcon(c);
			} else if (temp.equals("3")) {
				Card3.setIcon(d);
			} else if (temp.equals("4")) {
				Card3.setIcon(e);
			} else if (temp.equals("5")) {
				Card3.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[2] = 0;
			} else if (count == 2) {
				if(change[2]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[2] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card3ActionPerformed

	private void Card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card5ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(4);
		if(count<2 && change[4]!=2) {

			if (temp.equals("0")) {
				Card5.setIcon(a);
			} else if (temp.equals("1")) {
				Card5.setIcon(b);
			} else if (temp.equals("2")) {
				Card5.setIcon(c);
			} else if (temp.equals("3")) {
				Card5.setIcon(d);
			} else if (temp.equals("4")) {
				Card5.setIcon(e);
			} else if (temp.equals("5")) {
				Card5.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[4] = 0;
			} else if (count == 2) {
				if(change[4]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[4] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card5ActionPerformed

	private void Card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card4ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(3);
		if(count<2 && change[3]!=2) {

			if (temp.equals("0")) {
				Card4.setIcon(a);
			} else if (temp.equals("1")) {
				Card4.setIcon(b);
			} else if (temp.equals("2")) {
				Card4.setIcon(c);
			} else if (temp.equals("3")) {
				Card4.setIcon(d);
			} else if (temp.equals("4")) {
				Card4.setIcon(e);
			} else if (temp.equals("5")) {
				Card4.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[3] = 0;
			} else if (count == 2) {
				if(change[3]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[3] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card4ActionPerformed

	private void Card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card6ActionPerformed
		// TODO add your handling code here:


		String temp = cards.get(5);
		if(count<2 && change[5]!=2) {

			if (temp.equals("0")) {
				Card6.setIcon(a);
			} else if (temp.equals("1")) {
				Card6.setIcon(b);
			} else if (temp.equals("2")) {
				Card6.setIcon(c);
			} else if (temp.equals("3")) {
				Card6.setIcon(d);
			} else if (temp.equals("4")) {
				Card6.setIcon(e);
			} else if (temp.equals("5")) {
				Card6.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[5] = 0;
			} else if (count == 2) {
				if(change[5]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[5] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card6ActionPerformed

	private void Card7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card7ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(6);
		if(count<2 && change[6]!=2) {

			if (temp.equals("0")) {
				Card7.setIcon(a);
			} else if (temp.equals("1")) {
				Card7.setIcon(b);
			} else if (temp.equals("2")) {
				Card7.setIcon(c);
			} else if (temp.equals("3")) {
				Card7.setIcon(d);
			} else if (temp.equals("4")) {
				Card7.setIcon(e);
			} else if (temp.equals("5")) {
				Card7.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[6] = 0;
			} else if (count == 2) {
				if(change[6]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[6] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card7ActionPerformed

	private void Card8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card8ActionPerformed
		// TODO add your handling code here:


		String temp = cards.get(7);
		if(count<2 && change[7]!=2) {

			if (temp.equals("0")) {
				Card8.setIcon(a);
			} else if (temp.equals("1")) {
				Card8.setIcon(b);
			} else if (temp.equals("2")) {
				Card8.setIcon(c);
			} else if (temp.equals("3")) {
				Card8.setIcon(d);
			} else if (temp.equals("4")) {
				Card8.setIcon(e);
			} else if (temp.equals("5")) {
				Card8.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[7] = 0;
			} else if (count == 2) {
				if(change[7]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[7] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card8ActionPerformed

	private void Card9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card9ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(8);
		if(count<2 && change[8]!=2) {

			if (temp.equals("0")) {
				Card9.setIcon(a);
			} else if (temp.equals("1")) {
				Card9.setIcon(b);
			} else if (temp.equals("2")) {
				Card9.setIcon(c);
			} else if (temp.equals("3")) {
				Card9.setIcon(d);
			} else if (temp.equals("4")) {
				Card9.setIcon(e);
			} else if (temp.equals("5")) {
				Card9.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[8] = 0;
			} else if (count == 2) {
				if(change[8]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[8] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card9ActionPerformed

	private void Card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card10ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(9);
		if(count<2 && change[9]!=2) {

			if (temp.equals("0")) {
				Card10.setIcon(a);
			} else if (temp.equals("1")) {
				Card10.setIcon(b);
			} else if (temp.equals("2")) {
				Card10.setIcon(c);
			} else if (temp.equals("3")) {
				Card10.setIcon(d);
			} else if (temp.equals("4")) {
				Card10.setIcon(e);
			} else if (temp.equals("5")) {
				Card10.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[9] = 0;
			} else if (count == 2) {
				if(change[9]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[9] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card10ActionPerformed

	private void Card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card11ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(10);
		if(count<2 && change[10]!=2) {

			if (temp.equals("0")) {
				Card11.setIcon(a);
			} else if (temp.equals("1")) {
				Card11.setIcon(b);
			} else if (temp.equals("2")) {
				Card11.setIcon(c);
			} else if (temp.equals("3")) {
				Card11.setIcon(d);
			} else if (temp.equals("4")) {
				Card11.setIcon(e);
			} else if (temp.equals("5")) {
				Card11.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[10] = 0;
			} else if (count == 2) {
				if(change[10]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[10] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card11ActionPerformed

	private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
		// TODO add your handling code here:

		String temp = cards.get(11);
		if(count<2 && change[11]!=2) {

			if (temp.equals("0")) {
				Card12.setIcon(a);
			} else if (temp.equals("1")) {
				Card12.setIcon(b);
			} else if (temp.equals("2")) {
				Card12.setIcon(c);
			} else if (temp.equals("3")) {
				Card12.setIcon(d);
			} else if (temp.equals("4")) {
				Card12.setIcon(e);
			} else if (temp.equals("5")) {
				Card12.setIcon(f);
			} 

			count++;
			if (count == 1) {
				c1 = Integer.parseInt(temp);
				change[11] = 0;
			} else if (count == 2) {
				if(change[11]==0) {//check to make sure this card has not already been selected
					count--;
				}
				else {
					c2 = Integer.parseInt(temp);
					change[11] = 0;
				}
			}
		}

	}//GEN-LAST:event_Card12ActionPerformed

	private void btuGuessAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btuGuessAgainActionPerformed
		// TODO add your handling code here:
		txtInstruction.setText("Click on a card to select. Click 2 cards before guessing. Make sure to click Guess Again after each guess.");
		if(count==2) {
			count=0;
			if (c1 == c2) {
				for (int y = 1; y <= 2; y++) {
					if (change[0] == 0) {
						Card1.setIcon(done);
						change[0] = 2;
					} else if (change[1] == 0) {
						Card2.setIcon(done);
						change[1] = 2;
					} else if (change[2] == 0) {
						Card3.setIcon(done);
						change[2] = 2;
					} else if (change[3] == 0) {
						Card4.setIcon(done);
						change[3] = 2;
					} else if (change[4] == 0) {
						Card5.setIcon(done);
						change[4] = 2;
					} else if (change[5] == 0) {
						Card6.setIcon(done);
						change[5] = 2;
					} else if (change[6] == 0) {
						Card7.setIcon(done);
						change[6] = 2;
					} else if (change[7] == 0) {
						Card8.setIcon(done);
						change[7] = 2;
					} else if (change[8] == 0) {
						Card9.setIcon(done);
						change[8] = 2;
					} else if (change[9] == 0) {
						Card10.setIcon(done);
						change[9] = 2;
					} else if (change[10] == 0) {
						Card11.setIcon(done);
						change[10] = 2;
					} else if (change[11] == 0) {
						Card12.setIcon(done);
						change[11] = 2;
					} 
				}
			}
			else {

				for (int z = 1; z <= 2; z++) {

					if (change[0] == 0) {
						Card1.setIcon(back);
						change[0] = 1;
					} else if (change[1] == 0) {
						Card2.setIcon(back);
						change[1] = 1;
					} else if (change[2] == 0) {
						Card3.setIcon(back);
						change[2] = 1;
					} else if (change[3] == 0) {
						Card4.setIcon(back);
						change[3] = 1;
					} else if (change[4] == 0) {
						Card5.setIcon(back);
						change[4] = 1;
					} else if (change[5] == 0) {
						Card6.setIcon(back);
						change[5] = 1;
					} else if (change[6] == 0) {
						Card7.setIcon(back);
						change[6] = 1;
					} else if (change[7] == 0) {
						Card8.setIcon(back);
						change[7] = 1;
					} else if (change[8] == 0) {
						Card9.setIcon(back);
						change[8] = 1;
					} else if (change[9] == 0) {
						Card10.setIcon(back);
						change[9] = 1;
					} else if (change[10] == 0) {
						Card11.setIcon(back);
						change[10] = 1;
					} else if (change[11] == 0) {
						Card12.setIcon(back);
						change[11] = 1;
					}                          
				} 
			}    
			boolean gameover = true;
			for(int i : change) {
				if (i==1) {
					gameover=false;
				}
			}
			if(gameover) {
				txtInstruction.setText("Congratulations.");
				System.out.println("");
			}
		}
		else if(count!=2) {
			txtInstruction.setText("Select 2 cards before guessing.");
		}
	}//GEN-LAST:event_btuGuessAgainActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MatchingGameEdited.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MatchingGameEdited.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MatchingGameEdited.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MatchingGameEdited.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MatchingGameEdited().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton Card1;
	private javax.swing.JButton Card10;
	private javax.swing.JButton Card11;
	private javax.swing.JButton Card12;
	private javax.swing.JButton Card2;
	private javax.swing.JButton Card3;
	private javax.swing.JButton Card4;
	private javax.swing.JButton Card5;
	private javax.swing.JButton Card6;
	private javax.swing.JButton Card7;
	private javax.swing.JButton Card8;
	private javax.swing.JButton Card9;
	private javax.swing.JButton btnExit;
	private javax.swing.JButton btnPlay;
	private javax.swing.JButton btuGuessAgain;
	private javax.swing.JLabel mainTitle;
	private javax.swing.JTextField txtInstruction;
	// End of variables declaration//GEN-END:variables
}
